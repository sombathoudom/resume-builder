// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EnumRole {
  USER
  ADMIN
}

enum EnumSubscriptionPlan {
  FREE
  PRO
}

enum EnumSubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

model User {
  id                  String               @id @default(cuid())
  name                String
  email               String               @unique
  password            String
  role                EnumRole             @default(USER)
  subscription_plan   EnumSubscriptionPlan @default(FREE)
  subscription_expiry DateTime
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  cvs                 CV[]
  subscriptions       Subscription[]
}

enum EnumCVStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model CV {
  id          String        @id @default(cuid())
  userId      String
  templateId  String
  title       String        @default("My CV")
  data_json   Json
  pdf_url     String        @default("")
  status      EnumCVStatus  @default(DRAFT)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])
  template    Template      @relation(fields: [templateId], references: [id])
}

model Template {
  id          String   @id @default(cuid())
  name        String
  description String
  preview_url String
  file_path   String
  component_name String @unique // e.g., "CvTempV1", "CvTempV2"
  is_active   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt  DateTime @updatedAt
  cvs        CV[]
}

model Subscription {
  id        String                 @id @default(cuid())
  userId    String
  plan      EnumSubscriptionPlan
  startDate DateTime
  endDate   DateTime
  status    EnumSubscriptionStatus
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  user      User                   @relation(fields: [userId], references: [id])
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
